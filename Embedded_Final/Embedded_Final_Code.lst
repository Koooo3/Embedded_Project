;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 1/23/2023 11:31:08 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2858      	GOTO       88
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00A4      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00A5      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A0      	MOVWF      32
;Embedded_Final_Code.c,13 :: 		void interrupt()
;Embedded_Final_Code.c,15 :: 		if(PIR1&20)  // Receive flag raised
0x000D	0x3014      	MOVLW      20
0x000E	0x050C      	ANDWF      PIR1, 0
0x000F	0x00F0      	MOVWF      R0
0x0010	0x1903      	BTFSC      STATUS, 2
0x0011	0x2816      	GOTO       L_interrupt0
;Embedded_Final_Code.c,17 :: 		receivedbyte=RCREG;  // Read received data (byte)
0x0012	0x081A      	MOVF       RCREG, 0
0x0013	0x00A1      	MOVWF      _receivedbyte
;Embedded_Final_Code.c,18 :: 		PIR1=PIR1&0XDF; // Clear receive flag
0x0014	0x30DF      	MOVLW      223
0x0015	0x058C      	ANDWF      PIR1, 1
;Embedded_Final_Code.c,19 :: 		}
L_interrupt0:
;Embedded_Final_Code.c,20 :: 		}
L_end_interrupt:
L__interrupt10:
0x0016	0x0820      	MOVF       32, 0
0x0017	0x00F0      	MOVWF      R0
0x0018	0x0825      	MOVF       ___savePCLATH, 0
0x0019	0x008A      	MOVWF      PCLATH
0x001A	0x0E24      	SWAPF      ___saveSTATUS, 0
0x001B	0x0083      	MOVWF      STATUS
0x001C	0x0EFF      	SWAPF      R15, 1
0x001D	0x0E7F      	SWAPF      R15, 0
0x001E	0x0009      	RETFIE
; end of _interrupt
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x001F	0x1283      	BCF        STATUS, 5
0x0020	0x1303      	BCF        STATUS, 6
0x0021	0x0823      	MOVF       ___DoICPAddr+1, 0
0x0022	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0023	0x0822      	MOVF       ___DoICPAddr, 0
0x0024	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0025	0x0008      	RETURN
; end of _____DoICP
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x0026	0x201F      	CALL       _____DoICP
0x0027	0x118A      	BCF        PCLATH, 3
0x0028	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x0029	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x002A	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x002B	0x0AA2      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x002C	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x002D	0x0AA3      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x002E	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x002F	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x0030	0x2826      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x0031	0x0008      	RETURN
; end of ___CC2DW
_PWM_Duty:
;Embedded_Final_Code.c,33 :: 		void PWM_Duty(unsigned char duty)
;Embedded_Final_Code.c,35 :: 		if(duty<=250) // Make sure the duty cycle is within the PWM_Period
0x0032	0x1283      	BCF        STATUS, 5
0x0033	0x1303      	BCF        STATUS, 6
0x0034	0x0826      	MOVF       FARG_PWM_Duty_duty, 0
0x0035	0x3CFA      	SUBLW      250
0x0036	0x1C03      	BTFSS      STATUS, 0
0x0037	0x283A      	GOTO       L_PWM_Duty1
;Embedded_Final_Code.c,39 :: 		CCPR1L = duty;// Store the 8 bits in the CCPR1L Reg
0x0038	0x0826      	MOVF       FARG_PWM_Duty_duty, 0
0x0039	0x0095      	MOVWF      CCPR1L
;Embedded_Final_Code.c,40 :: 		}
L_PWM_Duty1:
;Embedded_Final_Code.c,41 :: 		}
L_end_PWM_Duty:
0x003A	0x0008      	RETURN
; end of _PWM_Duty
_UART_Init:
;Embedded_Final_Code.c,43 :: 		void UART_Init()
;Embedded_Final_Code.c,45 :: 		TRISC = TRISC | 0x80;  // Rx/Rc7 Input
0x003B	0x1683      	BSF        STATUS, 5
0x003C	0x1303      	BCF        STATUS, 6
0x003D	0x1787      	BSF        TRISC, 7
;Embedded_Final_Code.c,46 :: 		TRISC = TRISC & 0xBF;  // Tx/RC6 Output
0x003E	0x30BF      	MOVLW      191
0x003F	0x0587      	ANDWF      TRISC, 1
;Embedded_Final_Code.c,47 :: 		TXSTA=0x20;            // Enable 8-bit Transmitter in Asynchronous Mode
0x0040	0x3020      	MOVLW      32
0x0041	0x0098      	MOVWF      TXSTA
;Embedded_Final_Code.c,48 :: 		RCSTA=0x90;            // Enable Serial Port and 8-bit continuous receive
0x0042	0x3090      	MOVLW      144
0x0043	0x1283      	BCF        STATUS, 5
0x0044	0x0098      	MOVWF      RCSTA
;Embedded_Final_Code.c,49 :: 		SPBRG = 12;            // Low Speed 9600 Baud Rate with Fosc = 8Mghz
0x0045	0x300C      	MOVLW      12
0x0046	0x1683      	BSF        STATUS, 5
0x0047	0x0099      	MOVWF      SPBRG
;Embedded_Final_Code.c,50 :: 		PIE1=PIE1|0X20;        // Enable Receive Interrupt
0x0048	0x168C      	BSF        PIE1, 5
;Embedded_Final_Code.c,51 :: 		INTCON=INTCON|0xC0;    // Enable GIE and PIE
0x0049	0x30C0      	MOVLW      192
0x004A	0x048B      	IORWF      INTCON, 1
;Embedded_Final_Code.c,52 :: 		}
L_end_UART_Init:
0x004B	0x0008      	RETURN
; end of _UART_Init
_PWM_Init:
;Embedded_Final_Code.c,21 :: 		void PWM_Init()
;Embedded_Final_Code.c,26 :: 		CCP1CON = 0X0C; //Configure the CCP1 module for PWM operation
0x004C	0x300C      	MOVLW      12
0x004D	0x1283      	BCF        STATUS, 5
0x004E	0x1303      	BCF        STATUS, 6
0x004F	0x0097      	MOVWF      CCP1CON
;Embedded_Final_Code.c,27 :: 		T2CON = 0x06; //TMR2 on with 1:16 Prescale
0x0050	0x3006      	MOVLW      6
0x0051	0x0092      	MOVWF      T2CON
;Embedded_Final_Code.c,28 :: 		PR2 = 250; // 8us * 250 = 2ms = PWM_Period
0x0052	0x30FA      	MOVLW      250
0x0053	0x1683      	BSF        STATUS, 5
0x0054	0x0092      	MOVWF      PR2
;Embedded_Final_Code.c,30 :: 		TRISC = TRISC & 0xFB; // CCP1/RC2 Pin Output
0x0055	0x30FB      	MOVLW      251
0x0056	0x0587      	ANDWF      TRISC, 1
;Embedded_Final_Code.c,31 :: 		}
L_end_PWM_Init:
0x0057	0x0008      	RETURN
; end of _PWM_Init
_main:
0x0058	0x1283      	BCF        STATUS, 5
0x0059	0x1303      	BCF        STATUS, 6
0x005A	0x01A1      	CLRF       _receivedbyte
;Embedded_Final_Code.c,58 :: 		void main()
;Embedded_Final_Code.c,60 :: 		TRISB=0X00; // PORTB is going to connect to the input pins from the H-Bridge to control the direction of the motors
0x005B	0x1683      	BSF        STATUS, 5
0x005C	0x0186      	CLRF       TRISB
;Embedded_Final_Code.c,61 :: 		/*Not important*/ PORTC=0X00; // EXTRA: turning off output pins of portc just in case
0x005D	0x1283      	BCF        STATUS, 5
0x005E	0x0187      	CLRF       PORTC
;Embedded_Final_Code.c,62 :: 		PORTB=0X00;
0x005F	0x0186      	CLRF       PORTB
;Embedded_Final_Code.c,63 :: 		UART_Init(); //Initialize Serial Communication between PIC and Arduino
0x0060	0x203B      	CALL       _UART_Init
;Embedded_Final_Code.c,64 :: 		PWM_Init();  //Initialize PWM Module to be used for Motors.
0x0061	0x204C      	CALL       _PWM_Init
;Embedded_Final_Code.c,65 :: 		while(1)
L_main2:
;Embedded_Final_Code.c,68 :: 		if(receivedbyte == stop)
0x0062	0x1283      	BCF        STATUS, 5
0x0063	0x0821      	MOVF       _receivedbyte, 0
0x0064	0x3AFB      	XORLW      251
0x0065	0x1D03      	BTFSS      STATUS, 2
0x0066	0x286A      	GOTO       L_main4
;Embedded_Final_Code.c,70 :: 		PORTB=0x00;  // Motors Stop.
0x0067	0x0186      	CLRF       PORTB
;Embedded_Final_Code.c,71 :: 		PWM_Duty(0); // Duty cycle = 0
0x0068	0x01A6      	CLRF       FARG_PWM_Duty_duty
0x0069	0x2032      	CALL       _PWM_Duty
;Embedded_Final_Code.c,72 :: 		}
L_main4:
;Embedded_Final_Code.c,75 :: 		if(receivedbyte == right)
0x006A	0x0821      	MOVF       _receivedbyte, 0
0x006B	0x3AFD      	XORLW      253
0x006C	0x1D03      	BTFSS      STATUS, 2
0x006D	0x2870      	GOTO       L_main5
;Embedded_Final_Code.c,77 :: 		PORTB= 0X06; // Motors in Differet Directions. Turn right.
0x006E	0x3006      	MOVLW      6
0x006F	0x0086      	MOVWF      PORTB
;Embedded_Final_Code.c,78 :: 		}
L_main5:
;Embedded_Final_Code.c,79 :: 		if(receivedbyte == left)
0x0070	0x0821      	MOVF       _receivedbyte, 0
0x0071	0x3AFC      	XORLW      252
0x0072	0x1D03      	BTFSS      STATUS, 2
0x0073	0x2876      	GOTO       L_main6
;Embedded_Final_Code.c,81 :: 		PORTB=0X09; // Motors in Differet Directions. Turn left.
0x0074	0x3009      	MOVLW      9
0x0075	0x0086      	MOVWF      PORTB
;Embedded_Final_Code.c,82 :: 		}
L_main6:
;Embedded_Final_Code.c,83 :: 		if(receivedbyte == forward)
0x0076	0x0821      	MOVF       _receivedbyte, 0
0x0077	0x3AFF      	XORLW      255
0x0078	0x1D03      	BTFSS      STATUS, 2
0x0079	0x287C      	GOTO       L_main7
;Embedded_Final_Code.c,85 :: 		PORTB=0X05;  // Motors Both Forward.
0x007A	0x3005      	MOVLW      5
0x007B	0x0086      	MOVWF      PORTB
;Embedded_Final_Code.c,86 :: 		}
L_main7:
;Embedded_Final_Code.c,87 :: 		if(receivedbyte == backward)
0x007C	0x0821      	MOVF       _receivedbyte, 0
0x007D	0x3AFE      	XORLW      254
0x007E	0x1D03      	BTFSS      STATUS, 2
0x007F	0x2882      	GOTO       L_main8
;Embedded_Final_Code.c,89 :: 		PORTB= 0X0A; // Motors Both Backward.
0x0080	0x300A      	MOVLW      10
0x0081	0x0086      	MOVWF      PORTB
;Embedded_Final_Code.c,90 :: 		}
L_main8:
;Embedded_Final_Code.c,93 :: 		the next received bytes will control the speed.*/
0x0082	0x0821      	MOVF       _receivedbyte, 0
0x0083	0x00A6      	MOVWF      FARG_PWM_Duty_duty
0x0084	0x2032      	CALL       _PWM_Duty
;Embedded_Final_Code.c,101 :: 		}
0x0085	0x2862      	GOTO       L_main2
;Embedded_Final_Code.c,102 :: 		}
L_end_main:
0x0086	0x2886      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [27]    _interrupt
0x001F       [7]    _____DoICP
0x0026      [12]    ___CC2DW
0x0032       [9]    _PWM_Duty
0x003B      [17]    _UART_Init
0x004C      [12]    _PWM_Init
0x0058      [47]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [1]    PORTB
0x0007       [1]    PORTC
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x0012       [1]    T2CON
0x0015       [1]    CCPR1L
0x0017       [1]    CCP1CON
0x0018       [1]    RCSTA
0x001A       [1]    RCREG
0x0021       [1]    _receivedbyte
0x0022       [2]    ___DoICPAddr
0x0024       [1]    ___saveSTATUS
0x0025       [1]    ___savePCLATH
0x0026       [1]    FARG_PWM_Duty_duty
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x008C       [1]    PIE1
0x0092       [1]    PR2
0x0098       [1]    TXSTA
0x0099       [1]    SPBRG
